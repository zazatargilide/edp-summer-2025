# Full Python Code Example

from enum import Enum
import datetime # Added for timestamping events if needed

# --- 1. Working with Classes & Objects ---
# https://www.w3schools.com/python/python_classes.asp

class Sensor:
    """Represents a sensor in the zoo."""
    def __init__(self, id_number, sensor_type, cage_location):
        self.id_number = id_number
        # Use Enum for sensor_type for better control
        if isinstance(sensor_type, SensorType):
            self.sensor_type = sensor_type
        else:
            # Basic validation or default
            print(f"Warning: Invalid sensor type '{sensor_type}' for sensor {id_number}. Defaulting to UNKNOWN.")
            self.sensor_type = SensorType.UNKNOWN # Or raise an error

        self.cage_location = cage_location

    def describe(self):
        """Prints a description of the sensor."""
        print(f"Sensor {self.id_number}: type={self.sensor_type.value}, location='{self.cage_location}'")

# --- 7. Enums and Constants (define before use in Sensor) ---
# https://docs.python.org/3/library/enum.html

class SensorType(Enum):
    """Enumeration for different types of sensors."""
    HUMIDITY = "humidity"
    TEMPERATURE = "temperature"
    MOTION = "motion"
    UNKNOWN = "unknown" # Added for robustness

print("--- Enum Example ---")
print(f"SensorType for Humidity: {SensorType.HUMIDITY}")
print(f"Value of Humidity SensorType: {SensorType.HUMIDITY.value}")
print("-" * 20)

# --- Create variables for sensor ID, type, and location ---
print("--- Creating Sensor Variables ---")
# Sensor for elephant enclosure temperature
sensor_elephants_temp = Sensor(id_number=101, sensor_type=SensorType.TEMPERATURE, cage_location="Elephant Enclosure A")

# Sensor for penguin pool humidity
sensor_penguins_humidity = Sensor(id_number=205, sensor_type=SensorType.HUMIDITY, cage_location="Penguin Pool")

# Sensor for lion den motion
sensor_lions_motion = Sensor(id_number=310, sensor_type=SensorType.MOTION, cage_location="Lion Den East")

# Example of an invalid type string (will use UNKNOWN)
# sensor_invalid = Sensor(id_number=999, sensor_type="sound", cage_location="Aviary")


# Describe the created sensors
print("\n--- Sensor Descriptions ---")
sensors_list = [sensor_elephants_temp, sensor_penguins_humidity, sensor_lions_motion]
for sensor in sensors_list:
    sensor.describe()
# sensor_invalid.describe() # Uncomment to see the warning and UNKNOWN type
print("-" * 20)


# --- 2. Lists and Object Storage ---
# https://www.w3schools.com/python/python_lists.asp

class Event:
    """Represents an event generated by a sensor or system."""
    def __init__(self, name, payload, timestamp=None):
        self.name = name
        self.payload = payload # payload is often a dictionary
        self.timestamp = timestamp if timestamp else datetime.datetime.now()

    def __str__(self):
        """String representation of the event."""
        return f"Event(name='{self.name}', payload={self.payload}, timestamp={self.timestamp.strftime('%Y-%m-%d %H:%M:%S')})"

print("--- Creating Event Objects ---")
events = [
    Event('temperature_alert', {'sensor_id': 101, 'cage': 'Elephant Enclosure A', 'value': 35.2}),
    Event('motion_detected', {'sensor_id': 310, 'cage': 'Lion Den East', 'details': 'Movement near fence'}),
    Event('humidity_low', {'sensor_id': 205, 'cage': 'Penguin Pool', 'value': 15}),
    Event('temperature_reading', {'sensor_id': 101, 'cage': 'Elephant Enclosure A', 'value': 25.6})
]

print("\n--- All Event Names ---")
for event in events:
    print(event.name)

print("\n--- Filtering 'temperature_alert' Events ---")
for event in events:
    if event.name == 'temperature_alert':
        print(f"  Temp Alert: {event.payload} at {event.timestamp.strftime('%H:%M:%S')}")
print("-" * 20)


# --- Store animal names, cage numbers, and temperatures ---

print("--- Storing Animal and Cage Data ---")
# Using a dictionary where keys are animal types and values are lists of cage identifiers
animal_cages = {
    "Elephants": ["Elephant Enclosure A", "Elephant Enclosure B"],
    "Penguins": ["Penguin Pool"],
    "Lions": ["Lion Den East", "Lion Den West"],
    "Tigers": ["Tiger Habitat 1"]
}

print("\n--- Animal Cage Assignments ---")
for animal, cages in animal_cages.items():
    print(f"{animal}: {', '.join(cages)}")

# Accessing specific information
print(f"Cages for Lions: {animal_cages['Lions']}")

print("\n--- Storing Temperatures (Example: Latest reading per cage) ---")
# Using a dictionary where keys are cage locations and values are the last recorded temperature
cage_temperatures = {
    "Elephant Enclosure A": 25.5,  # degrees Celsius
    "Penguin Pool": 5.0,
    "Lion Den East": 28.1,
    "Tiger Habitat 1": 27.8,
    "Elephant Enclosure B": 26.0,
    "Lion Den West": None # Maybe no reading yet
}

print("\n--- Current Cage Temperatures ---")
for cage, temp in cage_temperatures.items():
    if temp is not None:
        print(f"{cage}: {temp}°C")
    else:
        print(f"{cage}: No reading available")

# Accessing a specific temperature
elephant_temp = cage_temperatures.get("Elephant Enclosure A", "N/A")
print(f"\nCurrent temperature in Elephant Enclosure A: {elephant_temp}°C")
print("-" * 20)


# --- 3. Loops ---
# https://www.w3schools.com/python/python_for_loops.asp

print("--- Loop Example: Welcoming Employees ---")
employees = ["Piotr", "Jane", "Mable", "John", "Tom"]
for employee in employees:
    print(f"Welcome {employee}!")
print("-" * 20)


# --- 4. Conditionals ---
# https://www.w3schools.com/python/python_conditions.asp

print("--- Conditional Example: Event Handling Logic ---")
def check_event_type(event_obj):
    """Determines action based on event name."""
    print(f"Checking event: {event_obj.name}")
    if event_obj.name == "temperature_alert":
        print("  Action: Dispatching vet...")
    elif event_obj.name == "motion_detected":
        print("  Action: Dispatching security guard...")
    elif event_obj.name == "humidity_low":
         print("  Action: Checking misting system...")
    else:
        print("  Action: Logging unknown event type.")

# Test with different events from our list
check_event_type(events[0]) # temperature_alert
check_event_type(events[1]) # motion_detected
check_event_type(events[2]) # humidity_low
check_event_type(Event('feeding_time', {})) # unknown
print("-" * 20)


# --- 6. Functions ---
# https://www.w3schools.com/python/python_functions.asp

print("--- Function Examples ---")
def create_event(name, payload):
    """Creates and returns a new Event object."""
    print(f"Function: Creating event '{name}'")
    return Event(name, payload)

def handle_event(event_obj):
    """Processes an event object."""
    print(f"Function: Handling {event_obj.name}: {event_obj.payload} at {event_obj.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
    # Add more sophisticated handling logic here if needed
    check_event_type(event_obj) # Reuse conditional logic

# Create and handle a new event
new_event = create_event("humidity_high", {"cage": "Reptile House", "value": 95})
handle_event(new_event)
print("-" * 20)


# --- 8. Dictionaries (for mapping event types to handlers) ---
# https://www.w3schools.com/python/python_dictionaries.asp

print("--- Dictionary Example: Event Handlers ---")
event_handlers = {
    "temperature_alert": "Veterinary Team",
    "motion_detected": "Security Team",
    "humidity_low": "Maintenance Team",
    "humidity_high": "Maintenance Team",
    "feeding_time": "Zookeeper Team",
    "dirty_cage": "Cleaning Crew"
}

# Task: Get responsible role for a given event
def get_responsible_team(event_name):
    """Finds the team responsible for handling an event type."""
    handler = event_handlers.get(event_name, "Operations Manager (Unknown Event)")
    print(f"Event '{event_name}' should be routed to: {handler}")

get_responsible_team("motion_detected")
get_responsible_team("temperature_alert")
get_responsible_team("power_outage") # Example of an event not in the dictionary
print("-" * 20)

print("\n--- End of Script ---")